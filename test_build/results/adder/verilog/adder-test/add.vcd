$date
	Fri Aug 18 21:50:24 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module addition_kernel_tb $end
$var wire 8 ! output_7 [7:0] $end
$var wire 8 " output_6 [7:0] $end
$var wire 8 # output_5 [7:0] $end
$var wire 8 $ output_4 [7:0] $end
$var wire 8 % output_3 [7:0] $end
$var wire 8 & output_2 [7:0] $end
$var wire 8 ' output_1 [7:0] $end
$var wire 8 ( output_0 [7:0] $end
$var reg 1 ) clk $end
$var reg 8 * input1_0 [7:0] $end
$var reg 8 + input1_1 [7:0] $end
$var reg 8 , input1_2 [7:0] $end
$var reg 8 - input1_3 [7:0] $end
$var reg 8 . input1_4 [7:0] $end
$var reg 8 / input1_5 [7:0] $end
$var reg 8 0 input1_6 [7:0] $end
$var reg 8 1 input1_7 [7:0] $end
$var reg 8 2 input2_0 [7:0] $end
$var reg 8 3 input2_1 [7:0] $end
$var reg 8 4 input2_2 [7:0] $end
$var reg 8 5 input2_3 [7:0] $end
$var reg 8 6 input2_4 [7:0] $end
$var reg 8 7 input2_5 [7:0] $end
$var reg 8 8 input2_6 [7:0] $end
$var reg 8 9 input2_7 [7:0] $end
$scope module u1 $end
$var wire 1 ) clk $end
$var wire 8 : input1_0 [7:0] $end
$var wire 8 ; input1_1 [7:0] $end
$var wire 8 < input1_2 [7:0] $end
$var wire 8 = input1_3 [7:0] $end
$var wire 8 > input1_4 [7:0] $end
$var wire 8 ? input1_5 [7:0] $end
$var wire 8 @ input1_6 [7:0] $end
$var wire 8 A input1_7 [7:0] $end
$var wire 8 B input2_0 [7:0] $end
$var wire 8 C input2_1 [7:0] $end
$var wire 8 D input2_2 [7:0] $end
$var wire 8 E input2_3 [7:0] $end
$var wire 8 F input2_4 [7:0] $end
$var wire 8 G input2_5 [7:0] $end
$var wire 8 H input2_6 [7:0] $end
$var wire 8 I input2_7 [7:0] $end
$var reg 8 J output_0 [7:0] $end
$var reg 8 K output_1 [7:0] $end
$var reg 8 L output_2 [7:0] $end
$var reg 8 M output_3 [7:0] $end
$var reg 8 N output_4 [7:0] $end
$var reg 8 O output_5 [7:0] $end
$var reg 8 P output_6 [7:0] $end
$var reg 8 Q output_7 [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
b1 I
b10 H
b11 G
b100 F
b101 E
b110 D
b111 C
b1000 B
b111 A
b110 @
b101 ?
b100 >
b11 =
b10 <
b1 ;
b0 :
b1 9
b10 8
b11 7
b100 6
b101 5
b110 4
b111 3
b1000 2
b111 1
b110 0
b101 /
b100 .
b11 -
b10 ,
b1 +
b0 *
0)
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#5
b1000 !
b1000 Q
b1000 "
b1000 P
b1000 #
b1000 O
b1000 $
b1000 N
b1000 %
b1000 M
b1000 &
b1000 L
b1000 '
b1000 K
b1000 (
b1000 J
1)
#10
0)
#15
1)
#20
0)
